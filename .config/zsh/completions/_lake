#compdef lake

local curcontext="$curcontext" state ret=1

_lake_commands() {
  local -a commands=(
    'new:create a Lean package in a new directory'
    'init:create a Lean package in the current directory'
    'build:build targets'
    'exe:build an exe and run it in Lake'"'"'s environment'
    'check-build:check if any default build targets are configured'
    'test:test the package using the configured test driver'
    'check-test:check if there is a properly configured test driver'
    'lint:lint the package using the configured lint driver'
    'check-lint:check if there is a properly configured lint driver'
    'clean:remove build outputs'
    'env:execute a command in Lake'"'"'s environment'
    'lean:elaborate a Lean file in Lake'"'"'s context'
    'update:update dependencies and save them to the manifest'
    'pack:pack build artifacts into an archive for distribution'
    'unpack:unpack build artifacts from an distributed archive'
    'upload:upload build artifacts to a GitHub release'
    'script:manage and run workspace scripts'
    'scripts:shorthand for `lake script list`'
    'run:shorthand for `lake script run`'
    'translate-config:change language of the package configuration'
    'serve:start the Lean language server'
  )

  _describe -t commands 'command' commands "$@"
}

_arguments -C -A "--version" \
  '--version[print version and exit]' \
  '(-h --help)'{-h,--help}'[print help of the program or a command and exit]' \
  '(-d --dir)'{-d,--dir}'[use the package configuration in a specific directory]:directory:_files -/' \
  '(-f --file)'{-f,--file}'[use a specific file for the package configuration]:file:_files' \
  '--lean[specify the `lean` command used by Lake]' \
  '(-K --key)'{-K,--key}'[set the configuration file option named key]' \
  '--old[only rebuild modified modules (ignore transitive deps)]' \
  '(-H --rehash)'{-H,--rehash}'[hash all files for traces (do not trust `.hash` files)]' \
  '(-u --update)'{-u,--update}'[update manifest before building]' \
  '(-R --reconfigure)'{-R,--reconfigure}'[elaborate configuration files instead of using OLeans]' \
  '--no-build[exit immediately if a build target is not up-to-date]' \
  '--no-cache[build packages locally; do not download build caches]' \
  '--try-cache[attempt to download build caches for supported packages]' \
  '(-q --quiet)'{-q,--quiet}'[hide progress messages]' \
  '(-v --verbose)'{-v,--verbose}'[print out additional logging information]' \
  '1: :_lake_commands' \
  '*:: :->args' && ret=0

case $state in
  args)
    case $words[1] in
      build)
        local -a lean_files lean_modules
        lean_files=(**.lean(:r))
        lean_modules=(${lean_files//\//.})
        _multi_parts . lean_modules
        ;;
    esac
      ;;
esac

return ret
