#! /usr/bin/env python3
from getpass import getuser
from pathlib import Path
from shutil import which
from subprocess import run
import argparse
import os
import sys


def main(arguments):
    if "GITPOD_HOST" in os.environ:
        do_extra_gitpod_setup(arguments)  # gitpod-io/gitpod#19255

    make_symlinks(arguments)
    sys.exit(0)


def make_symlinks(arguments):
    """
    Symlink all the dotfiles into the destination directory.
    """
    ignored = {".config", ".local", ".git", ".gitignore", ".gitmodules"}

    for dotfile in arguments.dotfiles.glob(".*"):
        if dotfile.name in ignored:
            continue

        dest = arguments.dest_dir / dotfile.name
        symlink_unless_present(dotfile, dest)

    for each in [".config", ".local", ".local/share"]:
        dotfile_dir = arguments.dotfiles / each
        dest_dir = arguments.dest_dir / each
        try:
            dest_dir.symlink_to(dotfile_dir)
        except FileExistsError:
            # Fall back on linking individual files if we failed.
            if dest_dir.resolve() != dotfile_dir:
                for dotfile in dotfile_dir.iterdir():
                    dest = dest_dir / dotfile.name
                    symlink_unless_present(dotfile, dest)

    bin_dir = arguments.bin_dir.resolve()
    bin_dir.mkdir(parents=True, exist_ok=True)

    for bin in arguments.dotfiles.joinpath("bin").iterdir():
        pass  # let's not symlink by default for now


def do_extra_gitpod_setup(arguments):
    # gitpod-io/gitpod#19254
    run(["sudo", "chown", "-R", getuser(), str(Path.home())], check=True)

    # gitpod-io/gitpod#19202
    run(
        ["git", "submodule", "--quiet", "update", "--init"],
        cwd=arguments.dotfiles,
        check=True,
    )

    run(["sudo", "apt-get", "update", "--quiet"], check=True)

    packages = {"bat", "fd-find", "fzy", "ripgrep", "universal-ctags", "zsh"}
    run(["sudo", "apt-get", "install", "--quiet", "-y", *packages], check=True)

    arguments.bin_dir.joinpath("fd").symlink_to(which("fdfind"))

    run(["sudo", "chsh", "-s", "zsh"], check=True)


def symlink_unless_present(path: Path, dest: Path):
    """
    Symlink a file into the destination unless it exists already.
    """
    path = path.absolute()
    try:
        dest.symlink_to(path)
    except FileExistsError:
        print(f"{dest} already exists! Skipping...")
    else:
        print(f"Linked {path} into {dest}")


parser = argparse.ArgumentParser(description="Dotfiles installer")
parser.add_argument(
    "-b", "--bin-dir",
    default=Path.home() / ".local/bin",
    help="the directory to use for local binaries",
)
parser.add_argument(
    "-d", "--dest-dir",
    type=Path,
    default=Path.home(),
    help="the directory to link into",
)
parser.add_argument(
    "--dotfiles",
    type=Path,
    default=Path(__file__).parent.resolve(),
    help="the dotfiles to link",
)

main(parser.parse_args())
