#  /* vim: set filetype=python : */

import logging
import os
import sys

logger = logging.getLogger(__name__)


# Enable Pretty Printing for stdout
def _pprint_displayhook(value):
    import pprint

    if value is not None:
        try:
            import __builtin__
            __builtin__._ = value
        except ImportError:
            import builtins
            builtins._ = value

        pprint.pprint(value)

sys.displayhook = _pprint_displayhook

# bpython + django
try:
    from django.core.management import setup_environ
    import settings
    setup_environ(settings)
except:
    pass

# If we're working with a Django project, set up the environment
if 'DJANGO_SETTINGS_MODULE' in os.environ:
    from django.db.models.loading import get_models
    from django.test.client import Client
    from django.test.utils import (setup_test_environment,
                                   teardown_test_environment)
    from django.conf import settings as S

    class DjangoModelAggregate(object):
        def __init__(self):
            for m in get_models():
                setattr(self, m.__name__, m)

    M = DjangoModelAggregate()
    C = Client()

try:
    import readline
except ImportError:
    logger.error("Module readline not available.")
else:
    import rlcompleter
    readline.parse_and_bind("tab: complete")
    del readline, rlcompleter

del logging, os, sys
