#! /usr/bin/env python
# Generate a SSL certificate suitable for one-off testing of things over HTTPS
#
#
# Example usage:
#
#   $ twistd -n web --port ssl:port=4443:privateKey=<(sslonce) --wsgi wsgi.app
#
# You also will likely want to enable chrome://flags/#allow-insecure-localhost

from datetime import datetime, timedelta
import sys

from cryptography import x509
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.x509.oid import NameOID


# We do the bare minimum to get a certificate. Obviously do *not* run anything
# here anywhere other than during development.
key = rsa.generate_private_key(
    public_exponent=65537, key_size=2048, backend=default_backend(),
)

subject = issuer = x509.Name([x509.NameAttribute(NameOID.COUNTRY_NAME, u"US")])
certificate = x509.CertificateBuilder().subject_name(
    subject,
).issuer_name(
    issuer,
).serial_number(
    0,
).not_valid_before(
    datetime.utcnow(),
).not_valid_after(
    datetime.utcnow() + timedelta(days=1),
).public_key(
    key.public_key(),
).add_extension(
    x509.SubjectAlternativeName([x509.DNSName(u"localhost")]), critical=False,
).sign(key, hashes.SHA256(), default_backend())

sys.stdout.write(certificate.public_bytes(serialization.Encoding.PEM))
sys.stdout.write(
    key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.TraditionalOpenSSL,
        encryption_algorithm=serialization.NoEncryption(),
    ),
)
